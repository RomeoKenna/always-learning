<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="10 seconds">

    <property name="projectName" value="yfk"/>
    <property name="componentName" value="yfk-common"/>
    <property name="log.charset" value="utf8"/> <!-- 日志编码 -->
    <property name="log.base" value="/logs/yfk/${componentName}"/>
    <property name="log.max.size" value="1024MB"/> <!-- 日志文件大小,超过这个大小将重新创建,可以根据实际情况调整-->
    <property name="log.max.index" value="20"/>  <!-- 日志最大循环保留个数，可以根据实际情况调整-->

    <!-- 日志格式-->
    <!-- 日志格式-->
    <property name="FILE_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %p ${componentName} [%thread] [%logger{80}]%X{X-HIK_TRACE:-}%X{X-HIK_ERROR_CODE:-} - %msg %n "/>

    <!--控制台输出 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 保存输出DEBUG级别的日志 -->
    <appender name="debug" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 设置日志不超过${log.max.size}时的保存路径，注意如果是web项目会保存到Tomcat的bin目录 下 -->
        <file>${log.base}/${projectName}.${componentName}.debug.log</file>
        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${log.base}/${projectName}.${componentName}.debug.log.%i</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>${log.max.index}</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>${log.max.size}</maxFileSize>
        </triggeringPolicy>
        <!-- 日志输出的文件的格式 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 保存输出INFO级别以上的日志 -->
    <appender name="info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.base}/${projectName}.${componentName}.info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${log.base}/${projectName}.${componentName}.info.log.%i</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>${log.max.index}</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>${log.max.size}</maxFileSize>
        </triggeringPolicy>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 保存输出error级别的日志 -->
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.base}/${projectName}.${componentName}.error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${log.base}/${projectName}.${componentName}.error.log.%i</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>${log.max.index}</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>${log.max.size}</MaxFileSize>
        </triggeringPolicy>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
        </filter>
    </appender>

    <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
    <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
    <!-- 添加附加的appender,最多只能添加一个 -->
    <appender name="async.debug" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>256</queueSize>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref="debug"/>
    </appender>

    <appender name="async.info" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>256</queueSize>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref="info"/>
    </appender>

    <logger name="org.springframework.beans.factory.support" level="ERROR"/>

    <root level="WARN">
        <appender-ref ref="stdout"/>
        <appender-ref ref="debug"/>
        <appender-ref ref="error"/>
        <appender-ref ref="async.info"/>
        <appender-ref ref="async.debug"/>
    </root>
</configuration>